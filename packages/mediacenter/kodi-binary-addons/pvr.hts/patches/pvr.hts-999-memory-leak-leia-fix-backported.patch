diff --git a/CMakeLists.txt b/CMakeLists.txt
index c22ee71..7aff92b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -65,6 +65,7 @@ set(HTS_SOURCES_TVHEADEND_UTILITIES
                 src/tvheadend/utilities/Utilities.h
                 src/tvheadend/utilities/Logger.h
                 src/tvheadend/utilities/Logger.cpp
+                src/tvheadend/utilities/LocalizedString.h
                 src/tvheadend/utilities/AsyncState.cpp
                 src/tvheadend/utilities/AsyncState.h)
                 
diff --git a/pvr.hts/addon.xml.in b/pvr.hts/addon.xml.in
index df5bfa8..0236ecf 100644
--- a/pvr.hts/addon.xml.in
+++ b/pvr.hts/addon.xml.in
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <addon
   id="pvr.hts"
-  version="3.4.27"
+  version="3.4.28"
   name="Tvheadend HTSP Client"
   provider-name="Adam Sutton, Sam Stenvall, Lars Op den Kamp, Kai Sommerfeld">
   <requires>
diff --git a/pvr.hts/changelog.txt b/pvr.hts/changelog.txt
index 1aad9f3..2cc40f2 100644
--- a/pvr.hts/changelog.txt
+++ b/pvr.hts/changelog.txt
@@ -1,3 +1,6 @@
+3.4.28
+- Backported memory leak fix. Localized strings obtained from Kodi never were freed.
+
 3.4.27
 - Added support for 'default' recording priority setting value
   (fixes tvh 4.3 incompatibility with recordings not appearing in Kodi)
diff --git a/src/Tvheadend.cpp b/src/Tvheadend.cpp
index 9f4a1da..96b3bce 100644
--- a/src/Tvheadend.cpp
+++ b/src/Tvheadend.cpp
@@ -24,6 +24,7 @@
 #include <memory>
 
 #include "Tvheadend.h"
+#include "tvheadend/utilities/LocalizedString.h"
 #include "tvheadend/utilities/Utilities.h"
 #include "tvheadend/utilities/Logger.h"
 
@@ -656,53 +657,53 @@ PVR_ERROR CTvheadend::GetTimerTypes ( PVR_TIMER_TYPE types[], int *size )
   static std::vector< std::pair<int, std::string> > priorityValues;
   if (priorityValues.size() == 0)
   {
-    priorityValues.push_back(std::make_pair(DVR_PRIO_DEFAULT,     XBMC->GetLocalizedString(30368)));
-    priorityValues.push_back(std::make_pair(DVR_PRIO_UNIMPORTANT, XBMC->GetLocalizedString(30355)));
-    priorityValues.push_back(std::make_pair(DVR_PRIO_LOW,         XBMC->GetLocalizedString(30354)));
-    priorityValues.push_back(std::make_pair(DVR_PRIO_NORMAL,      XBMC->GetLocalizedString(30353)));
-    priorityValues.push_back(std::make_pair(DVR_PRIO_HIGH,        XBMC->GetLocalizedString(30352)));
-    priorityValues.push_back(std::make_pair(DVR_PRIO_IMPORTANT,   XBMC->GetLocalizedString(30351)));
+    priorityValues.push_back(std::make_pair(DVR_PRIO_DEFAULT,     LocalizedString(30368).Get()));
+    priorityValues.push_back(std::make_pair(DVR_PRIO_UNIMPORTANT, LocalizedString(30355).Get()));
+    priorityValues.push_back(std::make_pair(DVR_PRIO_LOW,         LocalizedString(30354).Get()));
+    priorityValues.push_back(std::make_pair(DVR_PRIO_NORMAL,      LocalizedString(30353).Get()));
+    priorityValues.push_back(std::make_pair(DVR_PRIO_HIGH,        LocalizedString(30352).Get()));
+    priorityValues.push_back(std::make_pair(DVR_PRIO_IMPORTANT,   LocalizedString(30351).Get()));
   }
 
   /* PVR_Timer.iPreventDuplicateEpisodes values and presentation.*/
   std::vector< std::pair<int, std::string> > deDupValues;
 
-  deDupValues.push_back(std::make_pair(DVR_AUTOREC_RECORD_ALL,                      XBMC->GetLocalizedString(30356)));
-  deDupValues.push_back(std::make_pair(DVR_AUTOREC_RECORD_DIFFERENT_EPISODE_NUMBER, XBMC->GetLocalizedString(30357)));
-  deDupValues.push_back(std::make_pair(DVR_AUTOREC_RECORD_DIFFERENT_SUBTITLE,       XBMC->GetLocalizedString(30358)));
-  deDupValues.push_back(std::make_pair(DVR_AUTOREC_RECORD_DIFFERENT_DESCRIPTION,    XBMC->GetLocalizedString(30359)));
-  deDupValues.push_back(std::make_pair(DVR_AUTOREC_RECORD_ONCE_PER_WEEK,            XBMC->GetLocalizedString(30360)));
-  deDupValues.push_back(std::make_pair(DVR_AUTOREC_RECORD_ONCE_PER_DAY,             XBMC->GetLocalizedString(30361)));
+  deDupValues.push_back(std::make_pair(DVR_AUTOREC_RECORD_ALL,                      LocalizedString(30356).Get()));
+  deDupValues.push_back(std::make_pair(DVR_AUTOREC_RECORD_DIFFERENT_EPISODE_NUMBER, LocalizedString(30357).Get()));
+  deDupValues.push_back(std::make_pair(DVR_AUTOREC_RECORD_DIFFERENT_SUBTITLE,       LocalizedString(30358).Get()));
+  deDupValues.push_back(std::make_pair(DVR_AUTOREC_RECORD_DIFFERENT_DESCRIPTION,    LocalizedString(30359).Get()));
+  deDupValues.push_back(std::make_pair(DVR_AUTOREC_RECORD_ONCE_PER_WEEK,            LocalizedString(30360).Get()));
+  deDupValues.push_back(std::make_pair(DVR_AUTOREC_RECORD_ONCE_PER_DAY,             LocalizedString(30361).Get()));
   if (m_conn.GetProtocol() >= 26)
   {
-    deDupValues.push_back(std::make_pair(DVR_AUTOREC_LRECORD_DIFFERENT_EPISODE_NUMBER, XBMC->GetLocalizedString(30362)));
-    deDupValues.push_back(std::make_pair(DVR_AUTOREC_LRECORD_DIFFERENT_SUBTITLE,       XBMC->GetLocalizedString(30363)));
-    deDupValues.push_back(std::make_pair(DVR_AUTOREC_LRECORD_DIFFERENT_TITLE,          XBMC->GetLocalizedString(30364)));
-    deDupValues.push_back(std::make_pair(DVR_AUTOREC_LRECORD_DIFFERENT_DESCRIPTION,    XBMC->GetLocalizedString(30365)));
-    deDupValues.push_back(std::make_pair(DVR_AUTOREC_LRECORD_ONCE_PER_WEEK,            XBMC->GetLocalizedString(30366)));
-    deDupValues.push_back(std::make_pair(DVR_AUTOREC_LRECORD_ONCE_PER_DAY,             XBMC->GetLocalizedString(30367)));
+    deDupValues.push_back(std::make_pair(DVR_AUTOREC_LRECORD_DIFFERENT_EPISODE_NUMBER, LocalizedString(30362).Get()));
+    deDupValues.push_back(std::make_pair(DVR_AUTOREC_LRECORD_DIFFERENT_SUBTITLE,       LocalizedString(30363).Get()));
+    deDupValues.push_back(std::make_pair(DVR_AUTOREC_LRECORD_DIFFERENT_TITLE,          LocalizedString(30364).Get()));
+    deDupValues.push_back(std::make_pair(DVR_AUTOREC_LRECORD_DIFFERENT_DESCRIPTION,    LocalizedString(30365).Get()));
+    deDupValues.push_back(std::make_pair(DVR_AUTOREC_LRECORD_ONCE_PER_WEEK,            LocalizedString(30366).Get()));
+    deDupValues.push_back(std::make_pair(DVR_AUTOREC_LRECORD_ONCE_PER_DAY,             LocalizedString(30367).Get()));
   }
 
   /* PVR_Timer.iLifetime values and presentation.*/
   std::vector< std::pair<int, std::string> > lifetimeValues;
 
-  lifetimeValues.push_back(std::make_pair(DVR_RET_1DAY,    XBMC->GetLocalizedString(30375)));
-  lifetimeValues.push_back(std::make_pair(DVR_RET_3DAY,    XBMC->GetLocalizedString(30376)));
-  lifetimeValues.push_back(std::make_pair(DVR_RET_5DAY,    XBMC->GetLocalizedString(30377)));
-  lifetimeValues.push_back(std::make_pair(DVR_RET_1WEEK,   XBMC->GetLocalizedString(30378)));
-  lifetimeValues.push_back(std::make_pair(DVR_RET_2WEEK,   XBMC->GetLocalizedString(30379)));
-  lifetimeValues.push_back(std::make_pair(DVR_RET_3WEEK,   XBMC->GetLocalizedString(30380)));
-  lifetimeValues.push_back(std::make_pair(DVR_RET_1MONTH,  XBMC->GetLocalizedString(30381)));
-  lifetimeValues.push_back(std::make_pair(DVR_RET_2MONTH,  XBMC->GetLocalizedString(30382)));
-  lifetimeValues.push_back(std::make_pair(DVR_RET_3MONTH,  XBMC->GetLocalizedString(30383)));
-  lifetimeValues.push_back(std::make_pair(DVR_RET_6MONTH,  XBMC->GetLocalizedString(30384)));
-  lifetimeValues.push_back(std::make_pair(DVR_RET_1YEAR,   XBMC->GetLocalizedString(30385)));
-  lifetimeValues.push_back(std::make_pair(DVR_RET_2YEARS,  XBMC->GetLocalizedString(30386)));
-  lifetimeValues.push_back(std::make_pair(DVR_RET_3YEARS,  XBMC->GetLocalizedString(30387)));
+  lifetimeValues.push_back(std::make_pair(DVR_RET_1DAY,    LocalizedString(30375).Get()));
+  lifetimeValues.push_back(std::make_pair(DVR_RET_3DAY,    LocalizedString(30376).Get()));
+  lifetimeValues.push_back(std::make_pair(DVR_RET_5DAY,    LocalizedString(30377).Get()));
+  lifetimeValues.push_back(std::make_pair(DVR_RET_1WEEK,   LocalizedString(30378).Get()));
+  lifetimeValues.push_back(std::make_pair(DVR_RET_2WEEK,   LocalizedString(30379).Get()));
+  lifetimeValues.push_back(std::make_pair(DVR_RET_3WEEK,   LocalizedString(30380).Get()));
+  lifetimeValues.push_back(std::make_pair(DVR_RET_1MONTH,  LocalizedString(30381).Get()));
+  lifetimeValues.push_back(std::make_pair(DVR_RET_2MONTH,  LocalizedString(30382).Get()));
+  lifetimeValues.push_back(std::make_pair(DVR_RET_3MONTH,  LocalizedString(30383).Get()));
+  lifetimeValues.push_back(std::make_pair(DVR_RET_6MONTH,  LocalizedString(30384).Get()));
+  lifetimeValues.push_back(std::make_pair(DVR_RET_1YEAR,   LocalizedString(30385).Get()));
+  lifetimeValues.push_back(std::make_pair(DVR_RET_2YEARS,  LocalizedString(30386).Get()));
+  lifetimeValues.push_back(std::make_pair(DVR_RET_3YEARS,  LocalizedString(30387).Get()));
   if (m_conn.GetProtocol() >= 25)
   {
-    lifetimeValues.push_back(std::make_pair(DVR_RET_SPACE,   XBMC->GetLocalizedString(30373)));
-    lifetimeValues.push_back(std::make_pair(DVR_RET_FOREVER, XBMC->GetLocalizedString(30374)));
+    lifetimeValues.push_back(std::make_pair(DVR_RET_SPACE,   LocalizedString(30373).Get()));
+    lifetimeValues.push_back(std::make_pair(DVR_RET_FOREVER, LocalizedString(30374).Get()));
   }
 
   unsigned int TIMER_ONCE_MANUAL_ATTRIBS
@@ -769,7 +770,7 @@ PVR_ERROR CTvheadend::GetTimerTypes ( PVR_TIMER_TYPE types[], int *size )
       PVR_TIMER_TYPE_IS_READONLY |
       PVR_TIMER_TYPE_FORBIDS_NEW_INSTANCES,
       /* Description. */
-      XBMC->GetLocalizedString(30350), // "One Time (Scheduled by repeating timer)"
+      LocalizedString(30350).Get(), // "One Time (Scheduled by repeating timer)"
       /* Values definitions for priorities. */
       priorityValues,
       /* Values definitions for lifetime. */
@@ -785,7 +786,7 @@ PVR_ERROR CTvheadend::GetTimerTypes ( PVR_TIMER_TYPE types[], int *size )
       PVR_TIMER_TYPE_IS_READONLY |
       PVR_TIMER_TYPE_FORBIDS_NEW_INSTANCES,
       /* Description. */
-      XBMC->GetLocalizedString(30350), // "One Time (Scheduled by repeating timer)"
+      LocalizedString(30350).Get(), // "One Time (Scheduled by repeating timer)"
       /* Values definitions for priorities. */
       priorityValues,
       /* Values definitions for lifetime. */
@@ -1576,7 +1577,7 @@ void CTvheadend::SyncCompleted ( void )
   {
     XBMC->QueueNotification(
         QUEUE_ERROR,
-        XBMC->GetLocalizedString(30502), streamingProfile.c_str());
+        LocalizedString(30502).Get().c_str(), streamingProfile.c_str());
   }
   else
   {
diff --git a/src/tvheadend/Subscription.cpp b/src/tvheadend/Subscription.cpp
index 9f1ae0e..c236267 100644
--- a/src/tvheadend/Subscription.cpp
+++ b/src/tvheadend/Subscription.cpp
@@ -20,6 +20,7 @@
  */
 
 #include "Subscription.h"
+#include "utilities/LocalizedString.h"
 #include "utilities/Logger.h"
 #include "../Tvheadend.h"
 
@@ -295,19 +296,19 @@ void Subscription::ParseSubscriptionStatus ( htsmsg_t *m )
 void Subscription::ShowStateNotification(void)
 {
   if (GetState() == SUBSCRIPTION_NOFREEADAPTER)
-    XBMC->QueueNotification(ADDON::QUEUE_WARNING, XBMC->GetLocalizedString(30450));
+    XBMC->QueueNotification(ADDON::QUEUE_WARNING, LocalizedString(30450).Get().c_str());
   else if (GetState() == SUBSCRIPTION_SCRAMBLED)
-    XBMC->QueueNotification(ADDON::QUEUE_WARNING, XBMC->GetLocalizedString(30451));
+    XBMC->QueueNotification(ADDON::QUEUE_WARNING, LocalizedString(30451).Get().c_str());
   else if (GetState() == SUBSCRIPTION_NOSIGNAL)
-    XBMC->QueueNotification(ADDON::QUEUE_WARNING, XBMC->GetLocalizedString(30452));
+    XBMC->QueueNotification(ADDON::QUEUE_WARNING, LocalizedString(30452).Get().c_str());
   else if (GetState() == SUBSCRIPTION_TUNINGFAILED)
-    XBMC->QueueNotification(ADDON::QUEUE_WARNING, XBMC->GetLocalizedString(30453));
+    XBMC->QueueNotification(ADDON::QUEUE_WARNING, LocalizedString(30453).Get().c_str());
   else if (GetState() == SUBSCRIPTION_USERLIMIT)
-    XBMC->QueueNotification(ADDON::QUEUE_WARNING, XBMC->GetLocalizedString(30454));
+    XBMC->QueueNotification(ADDON::QUEUE_WARNING, LocalizedString(30454).Get().c_str());
   else if (GetState() == SUBSCRIPTION_NOACCESS)
-    XBMC->QueueNotification(ADDON::QUEUE_WARNING, XBMC->GetLocalizedString(30455));
+    XBMC->QueueNotification(ADDON::QUEUE_WARNING, LocalizedString(30455).Get().c_str());
   else if (GetState() == SUBSCRIPTION_UNKNOWN)
-    XBMC->QueueNotification(ADDON::QUEUE_WARNING, XBMC->GetLocalizedString(30456));
+    XBMC->QueueNotification(ADDON::QUEUE_WARNING, LocalizedString(30456).Get().c_str());
 }
 
 uint32_t Subscription::GetNextId()
diff --git a/src/tvheadend/utilities/LocalizedString.h b/src/tvheadend/utilities/LocalizedString.h
index e69de29..24dfe99 100644
--- a/src/tvheadend/utilities/LocalizedString.h
+++ b/src/tvheadend/utilities/LocalizedString.h
@@ -0,0 +1,61 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2017 Team Kodi
+ *      http://kodi.tv
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, write to
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+ *  http://www.gnu.org/copyleft/gpl.html
+ *
+ */
+
+#include <string>
+
+#include "../../client.h"
+
+namespace tvheadend
+{
+  namespace utilities
+  {
+    /**
+     * Encapsulates an localized string.
+     */
+    class LocalizedString
+    {
+    public:
+      explicit LocalizedString(int stringId)
+      : m_localizedString(XBMC->GetLocalizedString(stringId))
+      {
+      }
+
+      ~LocalizedString()
+      {
+        XBMC->FreeString(m_localizedString);
+      }
+
+      std::string Get() const
+      {
+        return m_localizedString ? std::string(m_localizedString) : std::string();
+      }
+      
+    private:
+      LocalizedString() = delete;
+      LocalizedString(const LocalizedString&) = delete;
+      LocalizedString &operator =(const LocalizedString&) = delete;
+
+      char* m_localizedString;
+    };
+  }
+}
